import torch
import torch.nn as nn
import torch.optim as optim
import time
import torchvision
import torch.nn.functional as F
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, random_split

if __name__ == '__main__':

    torch.set_num_threads(4)

    # Transforms
    transform = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])

    # Load full CIFAR-10 (train + test = 60,000 samples)
    full_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
    test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

    # Combine train and test sets
    from torch.utils.data import ConcatDataset
    combined_dataset = ConcatDataset([full_dataset, test_dataset])

    total_size = len(combined_dataset) 
    train_size = int(0.8 * total_size)
    val_size = int(0.1 * total_size)
    test_size = total_size - train_size - val_size

    trainset, valset, testset = random_split(combined_dataset, [train_size, val_size, test_size])

    # DataLoaders
    trainloader = DataLoader(trainset, batch_size=64, shuffle=True, num_workers=2)
    valloader = DataLoader(valset, batch_size=64, shuffle=False, num_workers=2)
    testloader = DataLoader(testset, batch_size=64, shuffle=False, num_workers=2)

    print("Data loaded")
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f"Device in use: {device}")
    

    # CNN6 Definition
    class CNN3(nn.Module):
        def __init__(self):
            super(CNN3, self).__init__()
            self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)
            self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
            self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
            self.pool = nn.MaxPool2d(2, 2)
            self.fc = nn.Linear(128 * 4 * 4, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))  # 32x32 -> 16x16
            x = self.pool(F.relu(self.conv2(x)))  # 16x16 -> 8x8
            x = self.pool(F.relu(self.conv3(x)))  # 8x8 -> 4x4
            x = x.view(-1, 128 * 4 * 4)
            x = self.fc(x)
            return x

    model = CNN3().to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    num_epochs = 15
    print("Initiating training")
    for epoch in range(num_epochs):
        start_time = time.time()
        running_loss = 0.0
        model.train()
        
        for inputs, labels in trainloader:
            inputs, labels = inputs.to(device), labels.to(device)

            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()

        # Validation loop
        model.eval()
        val_loss = 0.0
        correct = 0
        total = 0
        with torch.no_grad():
            for inputs, labels in valloader:
                inputs, labels = inputs.to(device), labels.to(device)
                outputs = model(inputs)
                loss = criterion(outputs, labels)
                val_loss += loss.item()

                _, predicted = torch.max(outputs, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        val_acc = 100 * correct / total
        end_time = time.time()
        print(f"Epoch [{epoch+1}/{num_epochs}] | "
        f"Loss: {running_loss/len(trainloader):.4f} | "
        f"Val Acc: {val_acc:.2f}% | "
        f"Time: {time.time() - start_time:.2f}s")

    torch.save(model.state_dict(), 'CNN3_cifar10.pth')

